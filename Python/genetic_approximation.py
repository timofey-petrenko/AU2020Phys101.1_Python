import math
import random
import numpy as np

X = set()
Y = set()
for i in range(10):
    X.add(random.randint(-50, 50))
    Y.add(random.randint(-50, 50))
X = list(X)
Y = list(Y)
if len(X) != len(Y):
    X = X[:min(len(X), len(Y))]
    Y = Y[:min(len(X), len(Y))]
X = np.array(X) #–ø–æ–ª—É—á–∏–ª–∏ '—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ' —Ç–æ—á–∫–∏
Y = np.array(Y)

def generate_population(size, k_boundaries, b_boundaries):
    """–°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤–∏—á–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ –Ω—É–∂–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö 
    (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –ø–æ–ø—É–ª—è—Ü–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–Ω–æ–≥–æ—á–ª–µ–Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç–µ–ø–µ–Ω–∏)"""
    lower_k_boundary, upper_k_boundary = k_boundaries
    lower_b_boundary, upper_b_boundary = b_boundaries

    population = []
    for i in range(size):
        individual = {
            "k": random.uniform(lower_k_boundary, upper_k_boundary),
            "b": random.uniform(lower_b_boundary, upper_b_boundary),
        }
        population.append(individual)

    return population
    

def apply_function(individual):
    """–§—É–Ω–∫—Ü–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏–π –∏–Ω–¥–∏–≤–∏–¥ 
    –≤ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–º –ø–ª–∞–Ω–µ (–Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ –ø–æ–ª–∏–Ω–æ–º –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–æ—á–∫–∏)"""
    k = individual["k"]
    b = individual["b"]
    return - (np.sum((Y - k * X - b)**2))
    
def choice_by_roulette(sorted_population, fitness_sum):
    """–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥–æ–≤ —Å —É—á–µ—Ç–æ–º —Ö–æ—Ä–æ—à–µ—Å—Ç–∏"""
    offset = 0
    normalized_fitness_sum = fitness_sum

    lowest_fitness = apply_function(sorted_population[0])
    if lowest_fitness < 0:
        offset = -lowest_fitness
        normalized_fitness_sum += offset * len(sorted_population)

    draw = random.uniform(0, 1)

    accumulated = 0
    for individual in sorted_population:
        fitness = apply_function(individual) + offset
        probability = fitness / normalized_fitness_sum
        accumulated += probability

        if draw <= accumulated:
            return individual
        
        
def sort_population_by_fitness(population):
    """–°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –ø–æ —Ö–æ—Ä–æ—à–µ—Å—Ç–∏"""
    return sorted(population, key=apply_function)


def crossover(individual_a, individual_b):
    """–û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –∫—Ä–æ—Å—Å–æ–≤–µ—Ä"""
    ka = individual_a["k"]
    ba = individual_a["b"]

    kb = individual_b["k"]
    bb = individual_b["b"]

    return {"k": (ka + kb) / 2, "b": (ba + bb) / 2}


def mutate(individual):
    """–ú—É—Ç–∏—Ä—É–µ–º, –Ω–µ –≤—ã—Ö–æ–¥—è –∑–∞ –≥—Ä–∞–Ω–∏"""
    next_k = individual["k"] + random.uniform(-1, 1)
    next_b = individual["b"] + random.uniform(-1, 1)

    lower_boundary, upper_boundary = (-100, 100)

    # Guarantee we keep inside boundaries
    next_k = min(max(next_k, lower_boundary), upper_boundary)
    next_b = min(max(next_b, lower_boundary), upper_boundary)

    return {"k": next_k, "b": next_b}


def make_next_generation(previous_population):
    """–ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –Ω–æ–≤–æ–µ"""
    next_generation = []
    sorted_by_fitness_population = sort_population_by_fitness(previous_population)
    population_size = len(previous_population)
    fitness_sum = sum(apply_function(individual) for individual in population)

    for i in range(population_size):
        first_choice = choice_by_roulette(sorted_by_fitness_population, fitness_sum)
        second_choice = choice_by_roulette(sorted_by_fitness_population, fitness_sum)

        individual = crossover(first_choice, second_choice)
        individual = mutate(individual)
        next_generation.append(individual)

    return next_generation
    
generations = 2500

population = generate_population(size=100, k_boundaries=(-100, 100), b_boundaries=(-100, 100))
#–ø–ª–æ–¥–∏–º –ø–µ—Ä–≤–∏—á–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
i = 1
while True:

    if i == generations:
        break #–ø—Ä–∏ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∫–æ–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é

    i += 1

    population = make_next_generation(population)#–¥–µ–ª–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—É–ª—è—Ü–∏—é

best_individual = sort_population_by_fitness(population)[-1]#–≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥–∞
                                                       #(–Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—é)
print("\nüî¨ FINAL RESULT")
print("X=", X, " Y=", Y)
print(best_individual, apply_function(best_individual))
print(np.polyfit(X, Y, deg=1))
